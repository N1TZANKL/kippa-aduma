version: "3"

services:
    web:
        build:
            context: .
            dockerfile: Dockerfile
        # image: nodejs
        container_name: web
        restart: unless-stopped
        env_file: .env
        environment:
            - SERVICES_HOST=web-services
            - HOST=$HOST
            - SECRET=$SECRET
            - SITE_COOKIE=$SITE_COOKIE
            - CHAT_PORT=$CHAT_PORT
            - STORAGE_PORT=$STORAGE_PORT
            - DB_NAME=$DB_NAME
            - MONGO_HOST=$MONGO_HOST
            - MONGO_USERNAME=$MONGO_USERNAME
            - MONGO_PASSWORD=$MONGO_PASSWORD
        ports:
            - "80:3000"
        networks:
            - app-network
        depends_on:
            db:
                condition: service_healthy

    web-services:
        build:
            context: .
            dockerfile: services.Dockerfile
        # image: nodejs
        container_name: web-services
        restart: unless-stopped
        env_file: .env
        environment:
            - SERVICES_HOST=web-services
            - HOST=$HOST
            - SECRET=$SECRET
            - SITE_COOKIE=$SITE_COOKIE
            - CHAT_PORT=$CHAT_PORT
            - STORAGE_PORT=$STORAGE_PORT
            - DB_NAME=$DB_NAME
            - MONGO_HOST=$MONGO_HOST
            - MONGO_USERNAME=$MONGO_USERNAME
            - MONGO_PASSWORD=$MONGO_PASSWORD
        ports:
            - "${STORAGE_PORT}:${STORAGE_PORT}"
            - "${CHAT_PORT}:${CHAT_PORT}"
        networks:
            - app-network
        depends_on:
            db:
                condition: service_healthy

    db:
        build:
            context: .
            dockerfile: mongo.Dockerfile # mount keyfile instead of using dockerfile
        image: mongo:4.4.4-bionic
        container_name: db
        restart: unless-stopped
        env_file: .env
        environment:
            - MONGO_INITDB_ROOT_USERNAME=$MONGO_USERNAME
            - MONGO_INITDB_ROOT_PASSWORD=$MONGO_PASSWORD
            - MONGO_INITDB_DATABASE=$DB_NAME
        ports:
            - "27017:27017"
        volumes:
            - dbdata:/data/db
        networks:
            - app-network
        command: "--bind_ip_all --replSet rs0 --keyFile /data/mongod-keyfile --auth"
        healthcheck:
            test: test $$(echo "rs.status().ok" | mongo -u $${MONGO_INITDB_ROOT_USERNAME} -p $${MONGO_INITDB_ROOT_PASSWORD} --quiet) -eq 1
            interval: 10s
            start_period: 30s

    db-initializer:
        image: mongo:4.4.4-bionic
        container_name: db-initializer
        restart: on-failure
        depends_on:
            db:
                condition: service_started
        volumes:
            - ./deployment-scripts:/deployment-scripts
        env_file: .env
        entrypoint:
            - /deployment-scripts/docker-initialize-mongo.sh
        command: "$MONGO_USERNAME $MONGO_PASSWORD $DB_NAME"
        networks:
            - app-network

networks:
    app-network:
        driver: bridge

volumes:
    dbdata:
